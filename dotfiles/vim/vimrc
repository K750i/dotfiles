 " ==================================================================
 "            _   ___         _____          ____     
 "           | | / (_)_ _    / ___/__  ___  / _(_)__ _
 "           | |/ / /  ' \  / /__/ _ \/ _ \/ _/ / _ `/
 "           |___/_/_/_/_/  \___/\___/_//_/_//_/\_, /   
 "           https://github.com/K750i/dotfiles /___/  
 "
 " ==================================================================

" PLUG-INS ---------------------------------------------------------------- {{{
" RELOAD .vimrc AND :PlugInstall TO INSTALL PLUGINS
call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-unimpaired'
Plug 'drewtempelmeyer/palenight.vim'
Plug 'jacoborus/tender.vim'
Plug 'itchyny/lightline.vim'
Plug 'machakann/vim-highlightedyank'
Plug 'mattn/emmet-vim', {'for': ['html', 'css', 'javascript']}
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'prettier/vim-prettier', {
  \ 'do': 'npm install',
  \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue', 'yaml', 'html'] }
Plug 'sirver/ultisnips'
Plug 'honza/vim-snippets'
Plug 'jiangmiao/auto-pairs'
Plug 'lervag/vimtex'

call plug#end()

" }}}
" GENERAL ----------------------------------------------------------------- {{{
filetype plugin indent on                       " Enable file type detection, loading of indent & plugin files
runtime macros/matchit.vim                      " Extended matching with '%'
syntax on				                                " turn on syntax highlighting
set autoindent                                  " Copy indent to new line
set backspace=indent,eol,start                  " Allow backspace in Insert Mode
set cursorline                         					" highlight current line
set encoding=utf8                               " Set utf8 as standard encoding and en_US as standard language
set hidden                                      " Possibility to have more than one unsaved buffers
set history=500                                 " Store a ton more history than default
set ignorecase                                  " Case insensitive search
set incsearch                                   " Incremental and highlight search during typing
set lazyredraw                                  " Don't redraw while executing macros
set magic                                       " For regular expressions
set mouse=a                                     " Enable mouse usage (all modes)
set noerrorbells                                " Disable error bells
set nojoinspaces                                " Prevents inserting two spaces after punctuation on a join (J)
set novisualbell                                " Disable visual error indicator
set hlsearch                                    " turn on search highlighting
set noshowmode                                  " don't show vim's default status message
set nowrap					                            " don't wrap long lines
set number                                      " Enable line numbering
set relativenumber				                      " show line number relative to cursor
set scrolloff=3                                 " Keep cursor 3 lines above & below the screen when scrolling
set sidescrolloff=10                            " Keep cursor 10 chars to the left or right when scrolling horizontally
set smartcase                                   " Override 'ignorecase' if search contains uppercase characters.
set splitbelow                                  " Put new split window on the bottom of current window
set splitright                                  " Put new split window on the right of current window
set wildmenu                                    " Visual autocomplete for command menu
set path+=**

if has("nvim")
  set inccommand=nosplit                        " highlight text while using the substitution command
  tnoremap <esc> <c-\><c-n>
endif

if has("termguicolors")
  set termguicolors                             " Enable true colors
endif

if has('mac')
  let g:python3_host_prog = '/usr/local/bin/python3'
elseif has('win32')
  let g:python3_host_prog = $HOME.'\AppData\Local\Programs\Python\Python37-32\python'
endif

if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif
  set encoding=utf-8
  setglobal fileencoding=utf-8
  " Uncomment to have 'bomb' on by default for new files.
  " Note, this will not apply to the first, empty buffer created at Vim startup.
  "setglobal bomb
  set fileencodings=ucs-bom,utf-8,latin1
endif

" }}} 
" COLOR SCHEME ------------------------------------------------------------ {{{
" colorscheme palenight
" set background=dark 
" let g:material_theme_sytle = 'palenight'
" let g:material_terminal_italics = 1
" let g:lightline = {'colorscheme': 'wombat'}

colorscheme tender 
let g:lightline = {'colorscheme': 'tender'}
" }}}
" NETRW ------------------------------------------------------------------- {{{
" CHECK *netrw-browse-maps* FOR MAPPINGS
let g:netrw_banner=0                  " disable banner
let g:netrw_liststyle=3               " tree view

" }}}
" EMMET ------------------------------------------------------------------- {{{
let g:user_emmet_leader_key='<Tab>'
let g:user_emmet_settings = { 'javascript.jsx': { 'extends': 'jsx' } }

" }}}
" PRETTIER ---------------------------------------------------------------- {{{
let g:prettier#autoformat = 0
let g:prettier#exec_cmd_async = 1

" }}}
" ULTISNIPS --------------------------------------------------------------- {{{
let g:UltiSnipsEditSplit = 'vertical'

" }}}
" MAPPINGS ---------------------------------------------------------------- {{{
" expands the path to the active buffer with %%
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

let mapleader=","
nmap <leader>rc :tabedit ~/Documents/code/dotfiles/vim/vimrc<cr>
nmap <leader>ce :source ~/Documents/code/dotfiles/vim/vimrc<cr>
nmap <leader>s :w<cr>
nmap <leader>q :q<cr>
nmap <leader>fn :find<space>
nmap <leader>te :tabnew<cr>:term<cr>

nmap <leader>dd :e<space>
nmap <leader>dw :e %%
nmap <leader>ds :sp %%
nmap <leader>dv :vsp %%
nmap <leader>dt :tabe %%

"Run python script
nnoremap <leader>py :w !python<cr>

nnoremap <silent> <cr> :<c-u>nohlsearch<cr><c-l>
" Buffer operations
nnoremap <space><space> <c-^>
nnoremap <space>l :execute "rightbelow vsplit " . bufname("#")<cr>
nnoremap <space>j :execute "rightbelow split " . bufname("#")<cr>

nnoremap <c-l> <c-w><c-l>
nnoremap <c-h> <c-w><c-h>
nnoremap <c-j> <c-w><c-j>
nnoremap <c-k> <c-w><c-k>
" Change to display line movements unless preceded by [count]
" Automatically save movements larger than 5 lines to the jumplist
nnoremap <expr> j v:count ? (v:count > 5 ? "m'" . v:count : '') . 'j' : 'gj'
nnoremap <expr> k v:count ? (v:count > 5 ? "m'" . v:count : '') . 'k' : 'gk'
inoremap wf <esc>
inoremap <c-e> <esc>A
inoremap <c-u> <esc>gUawEa
inoremap <c-d> <esc>o

"Make operation pending commands for parentheses, brackets & braces easier
onoremap in( :<c-u>normal! f(vi(<cr>
onoremap in) :<c-u>normal! f(vi(<cr>
omap inb in(
onoremap in[ :<c-u>normal! f[vi[<cr>
onoremap in] :<c-u>normal! f[vi[<cr>
onoremap in{ :<c-u>normal! f{vi{<cr>
onoremap in} :<c-u>normal! f{vi{<cr>
omap inB in{

" }}}
" AUTOCOMMANDS ------------------------------------------------------------ {{{
" Vimscript file settings ------------------------------------------------- {{{
augroup filetype_vim
  autocmd!
  autocmd FileType vim setlocal foldmethod=marker
  autocmd FileType vim setlocal foldlevelstart=0
augroup end
" }}} 

" File type settings ------------------------------------------------------ {{{
augroup configgroup
  autocmd!
  autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue PrettierAsync
  autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
augroup end
" }}}

au BufNewFile,BufRead *.py
  \ set tabstop=4
  \ softtabstop=4
  \ shiftwidth=4
  \ textwidth=79
  \ expandtab
  \ fileformat=unix

au BufNewFile,BufRead *.js,*.html,*.css
  \ set tabstop=2
  \ softtabstop=2
  \ shiftwidth=2

" }}}
